# perform word count
countRepublican <- speechesDt[ party == "Republican" ] %>% count(word, sort = TRUE);
countDemocrat   <- speechesDt[ party == "Democratic" ] %>% count(word, sort = TRUE);
frequency <- bind_rows(mutate(speechesDt[ party == "Democratic"], party = "democratic"),
mutate(speechesDt[ party == "Republican"], party = "republican")) %>%
count(party, word) %>%
group_by(party) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(party, proportion)
speechesDt %>%
filter( party == "Republican" )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, value.var = n, fill = 0 )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
#acast( word ~ sentiment, value.var = n, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
speechesDt$word <- as.character( speechesDt$word )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, value.var = n, fill = 0 )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
#acast( word ~ sentiment, value.var = n, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
library("reshape2")
x <- data.frame(1:3, rnorm(3), rnorm(3), rnorm(3))
x
colnames(x) <- c("id", "var1", "var2", "var3")
y
y <-melt(x, id = "id", measure = c("var1", "var2", "var3"))
y
acast(y,y[,1] ~ y[,2])
acast(y, list(names(y)[1], names(y)[2]))
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE )
y[,1]
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, value.var = n ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
test <- speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE )
View(test)
acast( test, list(names(test)[1], names(test)[2]) )
comparison.cloud( term.matrix = z, colors = c("#F8766D", "#00BFC4"),
max.words = 100 )
z <- acast( test, list(names(test)[1], names(test)[2]) )
comparison.cloud( term.matrix = z, colors = c("#F8766D", "#00BFC4"),
max.words = 100 )
z <- acast( test, list(names(test)[1], names(test)[2]), value.var = n )
z <- acast( test, list(names(test)[1], names(test)[2]), fill = 0 )
comparison.cloud( term.matrix = z, colors = c("#F8766D", "#00BFC4"),
max.words = 100 )
comparison.cloud( term.matrix = z, colors = c("#F8766D", "#00BFC4"),
max.words = 100 )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
speechesDt %>%
filter( party == "Democratic" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
library(dplyr)
library(tidyr)
library(tidytext)
library(readtext)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(wordcloud)
library(RColorBrewer)
data( stop_words );
# data path
projPath <- "/Users/pedrohmariani/Documents/Columbia/Academic/Fall 2017/AppliedDataScience/Projects/proj1"
# read inauguration info
#inaugInfo <- read_excel(".data/InaugurationInfo.xlsx", sheet = 1)
inaugInfo <- as.data.table( read_excel(paste( projPath, "/data/InaugurationInfo.xlsx", sep = ""), sheet = 1) )
#inaugInfo <- read.csv(paste( projPath, "/data/InaugurationInfo copy.csv", sep = ""), header = TRUE ) # temporario
#inaugInfo <- lapply( inaugInfo[[1]], as.character );
#inaugInfo <- lapply( inaugInfo, function(x) strsplit( x , ";" ) );
# read inauguration date
dateFile <-  readtext( paste( projPath, "/data/InauguationDates.txt", sep = "") )
dateFile  <- strsplit( x = dateFile$text, split = "\n")
dateFile  <- sapply( dateFile[[1]][2:47], function(x) strsplit( x, split = "\t" ) )
inaugDate <- c(dateFile[[2]],"")
for( i in 3:46 ){
if( length( dateFile[[i]] ) == 4 ){
inaugDate <- rbind( inaugDate, c( dateFile[[i]], "" ) )
} else{
inaugDate <- rbind( inaugDate, dateFile[[i]] )
}
}
colnames( inaugDate ) <- dateFile[[1]]
# initialize variables
speechesList <- list();
counts     <- list();
presidents <- c();
term       <- c();
party      <- c();
date       <- c();
i <- 1;
for( iFile in list.files( paste( projPath, "/data/InauguralSpeeches", sep = "") ) ){
#iFile <- list.files( paste( projPath, "/data/InauguralSpeeches", sep = "") )[21]
# store president's name
aux <- strsplit( x = iFile, split = "inaug" )
aux <- strsplit( x = aux[[1]][2], split = "-" )
presidents[ i ] <- aux[[1]][1]
# store term information
term[ i ] <- strsplit( x = aux[[1]][length(aux[[1]])], split = ".txt" )
# conditionals deal with special name differences between files
if( presidents[ i ] == "GroverCleveland" ){
# store party information
party[ i ] <- "Democratic"
# store date information
if( iFile == "inaugGroverCleveland-I-1.txt" ){
date <- "3/4/1885"
} else {
date <- "3/4/1893"
}
} else if( presidents[ i ] == "JamesGarfield" ) {
party[ i ] <- "Republican"
date       <- "3/4/1881"
} else if( presidents[ i ] == "JamesKPolk" ) {
party[ i ] <- "Democratic"
date       <- "3/4/1845"
} else if( presidents[ i ] == "MartinvanBuren" ) {
party[ i ] <- "Democratic"
date       <- "3/4/1837"
} else if( presidents[ i ] == "RichardNixon" ) {
party[ i ] <- "Republican"
if( iFile == "inaugRichardNixon-1.txt" ){
date       <- "1/20/1969"
} else {
date       <- "1/20/1973"
}
} else {
# store party information
party[ i ] <- inaugInfo[ File == presidents[i] ]$Party[ 1 ]
# store date information
nameLong <- inaugInfo[ File == presidents[i] ]$President[1]
date     <- inaugDate[ which( inaugDate[,1] == nameLong ), 1 + as.numeric(term[[i]]) ]
}
# read speech
speech <- readtext( paste( paste( projPath, "/data/InauguralSpeeches", sep = ""),
iFile, sep = "/") );
# put speech in tidy format
speech <- speech %>%
unnest_tokens(word, text);
# remove stop words from speech
speech <- speech %>%
anti_join( stop_words[ stop_words$lexicon == "snowball", ] )
# create dataframe
speechesList[[ i ]] <- data.frame( "doc_id" = speech$doc_id,
"president" = rep( presidents[i], nrow(speech) ) ,
"term" = rep( term[[i]][1], nrow(speech) ),
"date" = rep( date, nrow(speech) ),
"party" = rep( party[i], nrow(speech) ),
"word" = speech$word );
i <- i + 1;
}
# Now, merge all speeches into a datatable
speechesDt <- as.data.table( speechesList[[1]] );
for( i in 2:length(speechesList) ){
speechesDt <- rbind( speechesDt, speechesList[[ i ]] );
}
countRepublican <- speechesDt[ party == "Republican" ] %>% count(word, sort = TRUE);
countDemocrat   <- speechesDt[ party == "Democratic" ] %>% count(word, sort = TRUE);
speechesDt$word <- as.character( speechesDt$word )
speechesDt %>%
filter( party == "Republican" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
speechesDt %>%
filter( party == "Democratic" ) %>%
inner_join( get_sentiments("bing") ) %>%
count( word, sentiment, sort = TRUE ) %>%
acast( word ~ sentiment, fill = 0 ) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
# load stop words table
data( stop_words );
# data path
projPath <- "/Users/pedrohmariani/Documents/Columbia/Academic/Fall 2017/AppliedDataScience/Projects/proj1"
# read inauguration info
#inaugInfo <- read_excel(".data/InaugurationInfo.xlsx", sheet = 1)
inaugInfo <- as.data.table( read_excel(paste( projPath, "/data/InaugurationInfo.xlsx", sep = ""), sheet = 1) )
#inaugInfo <- read.csv(paste( projPath, "/data/InaugurationInfo copy.csv", sep = ""), header = TRUE ) # temporario
#inaugInfo <- lapply( inaugInfo[[1]], as.character );
#inaugInfo <- lapply( inaugInfo, function(x) strsplit( x , ";" ) );
# read inauguration date
dateFile <-  readtext( paste( projPath, "/data/InauguationDates.txt", sep = "") )
dateFile  <- strsplit( x = dateFile$text, split = "\n")
dateFile  <- sapply( dateFile[[1]][2:47], function(x) strsplit( x, split = "\t" ) )
inaugDate <- c(dateFile[[2]],"")
for( i in 3:46 ){
if( length( dateFile[[i]] ) == 4 ){
inaugDate <- rbind( inaugDate, c( dateFile[[i]], "" ) )
} else{
inaugDate <- rbind( inaugDate, dateFile[[i]] )
}
}
colnames( inaugDate ) <- dateFile[[1]]
View(inaugDate)
# initialize variables
speechesList <- list();
counts     <- list();
presidents <- c();
term       <- c();
party      <- c();
date       <- c();
i <- 1;
for( iFile in list.files( paste( projPath, "/data/InauguralSpeeches", sep = "") ) ){
#iFile <- list.files( paste( projPath, "/data/InauguralSpeeches", sep = "") )[21]
# store president's name
aux <- strsplit( x = iFile, split = "inaug" )
aux <- strsplit( x = aux[[1]][2], split = "-" )
presidents[ i ] <- aux[[1]][1]
# store term information
term[ i ] <- strsplit( x = aux[[1]][length(aux[[1]])], split = ".txt" )
# conditionals deal with special name differences between files
if( presidents[ i ] == "GroverCleveland" ){
# store party information
party[ i ] <- "Democratic"
# store date information
if( iFile == "inaugGroverCleveland-I-1.txt" ){
date <- "3/4/1885"
} else {
date <- "3/4/1893"
}
} else if( presidents[ i ] == "JamesGarfield" ) {
party[ i ] <- "Republican"
date       <- "3/4/1881"
} else if( presidents[ i ] == "JamesKPolk" ) {
party[ i ] <- "Democratic"
date       <- "3/4/1845"
} else if( presidents[ i ] == "MartinvanBuren" ) {
party[ i ] <- "Democratic"
date       <- "3/4/1837"
} else if( presidents[ i ] == "RichardNixon" ) {
party[ i ] <- "Republican"
if( iFile == "inaugRichardNixon-1.txt" ){
date       <- "1/20/1969"
} else {
date       <- "1/20/1973"
}
} else {
# store party information
party[ i ] <- inaugInfo[ File == presidents[i] ]$Party[ 1 ]
# store date information
nameLong <- inaugInfo[ File == presidents[i] ]$President[1]
date     <- inaugDate[ which( inaugDate[,1] == nameLong ), 1 + as.numeric(term[[i]]) ]
}
# read speech
speech <- readtext( paste( paste( projPath, "/data/InauguralSpeeches", sep = ""),
iFile, sep = "/") );
# put speech in tidy format
speech <- speech %>%
unnest_tokens(word, text);
# remove stop words from speech
speech <- speech %>%
anti_join( stop_words[ stop_words$lexicon == "snowball", ] )
# create dataframe
speechesList[[ i ]] <- data.frame( "doc_id" = speech$doc_id,
"president" = rep( presidents[i], nrow(speech) ) ,
"term" = rep( term[[i]][1], nrow(speech) ),
"date" = rep( date, nrow(speech) ),
"party" = rep( party[i], nrow(speech) ),
"word" = speech$word );
i <- i + 1;
}
# Now, merge all speeches into a datatable
speechesDt <- as.data.table( speechesList[[1]] );
for( i in 2:length(speechesList) ){
speechesDt <- rbind( speechesDt, speechesList[[ i ]] );
}
# convert word from factor to character vector
speechesDt$word <- as.character( speechesDt$word )
speechesDt$date <- as.character( speechesDt$date )
speechesDt$date <- as.Date(speechesDt$date, "%m/%d/%Y")
speechesDt$date
afinn <- speechDt %>%
inner_join(get_sentiments("afinn"))
afinn <- speechesDt %>%
inner_join(get_sentiments("afinn"))
View(afinn)
afinn <- speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
mutate(method = "AFINN")
View(afinn)
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(Date, Views)) +
geom_line() +
scale_x_date(format = "%b-%Y") + xlab("")
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(Date, Views)) +
geom_line() +
scale_x_date()
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_line() +
scale_x_date()
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity") +
scale_x_date()
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity") +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity", width = 2) +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity", width = .2) +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity", width = 20) +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity" ) +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity" ) +
geom_line() +
scale_x_date() +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity" ) +
geom_line() +
scale_x_date( date_breaks = "20 years") +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity" ) +
geom_line() +
scale_x_date( ) +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
speechesDt %>%
inner_join( get_sentiments("afinn") ) %>%
group_by( date ) %>%
summarise( sentiment = sum(score) ) %>%
ggplot( aes(date, sentiment) ) +
geom_bar(stat = "identity", width = 1 ) +
geom_line() +
scale_x_date( ) +
ggtitle("Sentiment over time") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
shiny::runApp('Documents/PSR/Synthetics Series Validation/Shiny/v1')
shiny::runApp('Documents/PSR/Synthetics Series Validation/Shiny/v1')
shiny::runApp('Documents/PSR/Synthetics Series Validation/Shiny/v1')
}
}
---
1.25^2-(-.75)^2
1.25^2-(-.75)^2
1.25^2
.75^2
1.25
1/1.25
n_dig = 0
n_pixel_row = 20
n_pixel_col = 20
export = T
experiment_dir <- "../data/training_set/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
label_train <- read.csv("../data/training_set/label_train.csv", header=T)
source("../lib/feature.R")
label_train <- read.csv("./data/training_set/label_train.csv", header=T)
img_dir = img_train_dir
img_dir
getwd()
setwd("/Users/pedrohmariani/Documents/Columbia/Academic/Fall 2017/AppliedDataScience/Projects/TZstatsFolder/Fall2017-project3-fall2017-project3-grp1/lib")
img_dir = img_train_dir
img_dir
experiment_dir <- "../data/training_set/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
experiment_dir <- "./data/training_set/" # This will be modified for different data sets.
img_dir = "/Users/pedrohmariani/Documents/Columbia/Academic/Fall 2017/AppliedDataScience/Projects/TZstatsFolder/Fall2017-project3-fall2017-project3-grp1/data/training_set/train"
install.packages("EBImage")
img_dir
list.files(img_dir)
length(list.files(img_dir)[-1])
n_files <- length(list.files(img_dir)[-1])
img0 <-  readImage(paste0(img_dir, "img_", do.call(paste, c(as.list(rep("0",(n_dig-1))), sep = "")), 1, ".jpg"))
version()
version
install.packages(EBImage)
install.packages("EBImage")
version
